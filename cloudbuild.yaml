steps:
  # Create .env file
  - name: "bash"
    id: "create-env"
    entrypoint: 'bash'
    args:
      - "-c"
      - |
        printenv > .env.production && cat .env.production
    env:
      - "CONTENTFUL_ACCESS_TOKEN=$_ENV_CONTENTFUL_ACCESS_TOKEN"
      - "CONTENTFUL_SPACE_ID=$_ENV_CONTENTFUL_SPACE_ID"
      - "FIREBASE_API_KEY=$_ENV_FIREBASE_API_KEY"
      - "FIREBASE_APP_ID=$_ENV_FIREBASE_APP_ID"
      - "FIREBASE_AUTH_DOMAIN=$_ENV_FIREBASE_AUTH_DOMAIN"
      - "FIREBASE_DATABASE_URL=$_ENV_FIREBASE_DATABASE_URL"
      - "FIREBASE_MESSAGING_SENDER_ID=$_ENV_FIREBASE_MESSAGING_SENDER_ID"
      - "FIREBASE_PROJECT_ID=$_ENV_FIREBASE_PROJECT_ID"
      - "FIREBASE_STORAGE_BUCKET=$_ENV_FIREBASE_STORAGE_BUCKET"
      - "GATSBY_RECAPTCHA_CODE=$_ENV_GATSBY_RECAPTCHA_CODE"
      - "MEASUREMENT_ID=$_ENV_MEASUREMENT_ID"
    waitFor: ["-"]
  # Build the docker image
  - name: "gcr.io/cloud-builders/docker"
    id: "docker-build"
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/k8s/$_CLOUDSDK_CONTAINER_CLUSTER/$_NAMESPACE/$_SERVICE_NAME"
      - "."
    waitFor: ["create-env"]
  # Push the docker image
  - name: "gcr.io/cloud-builders/docker"
    id: "docker-push"
    args:
      - "push"
      - "gcr.io/$PROJECT_ID/k8s/$_CLOUDSDK_CONTAINER_CLUSTER/$_NAMESPACE/$_SERVICE_NAME:latest"
    waitFor: ["docker-build"]
  # Get credentials for the k8s cluster
  - name: "gcr.io/cloud-builders/kubectl"
    id: "kube-credentials"
    env:
      - "CLOUDSDK_COMPUTE_ZONE=$_CLOUDSDK_COMPUTE_ZONE"
      - "CLOUDSDK_CONTAINER_CLUSTER=$_CLOUDSDK_CONTAINER_CLUSTER"
      - "KUBECONFIG=/kube/config"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        CLUSTER=$$(gcloud config get-value container/cluster)
        PROJECT=$$(gcloud config get-value core/project)
        ZONE=$$(gcloud config get-value compute/zone)
        gcloud container clusters get-credentials $$CLUSTER \
          --project $$PROJECT \
          --zone $$ZONE
    volumes:
      - name: "kube"
        path: /kube
    waitFor: ["-"]
  # Refresh pod image
  - name: "gcr.io/cloud-builders/kubectl"
    env:
      - "KUBECONFIG=/kube/config"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        # Restart pod 
        echo " - Restart pod"
        kubectl delete pods  \
          -n $_NAMESPACE \
          -l app=$_SERVICE_NAME
    volumes:
      - name: "kube"
        path: /kube
    waitFor: ["docker-push", "kube-credentials"]